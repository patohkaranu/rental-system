package javaapplication5;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Main application class
public class JavaApplication5 {

    public static void main(String[] args) {
        // Creating scanner object to get user input
        Scanner scanner = new Scanner(System.in);
        
        // Creating RentalSystem object which is used to call the respective methods
        RentalSystem rentalSystem = new RentalSystem();
        
        // Adding vehicles to the rental system
        Vehicle car = new Vehicle("Toyota", "Supra", 2020, 100);
        Vehicle motorbike = new Vehicle("Honda", "CXR", 2000, 50);
        Vehicle truck = new Vehicle("Ford", "F150", 2001, 200);
        
        rentalSystem.addVehicle(car);
        rentalSystem.addVehicle(motorbike);
        rentalSystem.addVehicle(truck);
        
        while (true) {
            // Options for the user
            System.out.println();
            System.out.println("===== Vehicle Rental System =====");
            System.out.println("1. Rent a Vehicle");
            System.out.println("2. Return a Vehicle");
            System.out.println("3. Display Rental Information");
            System.out.println("4. Exit");
            System.out.println();
            System.out.print("Enter your choice: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline character
            
            switch (choice) {
                case 1:
                    // Rent a vehicle
                    System.out.print("Enter the vehicle make: ");
                    String make = scanner.nextLine();
                    System.out.print("Enter the vehicle model: ");
                    String model = scanner.nextLine();
                    
                    Vehicle selectedVehicle = null;
                    
                    // Check for available vehicles
                    for (Vehicle v : rentalSystem.getAvailableVehicles()) {
                        if (v.getMake().equalsIgnoreCase(make) && v.getModel().equalsIgnoreCase(model)) {
                            selectedVehicle = v;
                            break; // Vehicle found, no need to check further
                        }
                    }
                    
                    if (selectedVehicle != null) {
                        // Add the vehicle to rented vehicles
                        rentalSystem.rentVehicle(selectedVehicle);
                        System.out.print("Enter the rental duration in days: ");
                        int rentalDuration = scanner.nextInt();
                        
                        // Calculate total rental cost
                        double rentalCost = rentalSystem.calculateRentalCost(selectedVehicle, rentalDuration);
                        System.out.println("Successfully rented.");
                        System.out.println("Total rental Cost: " + rentalCost);
                    } else {
                        System.out.println("Matching vehicle is not available for rent.");
                    }
                    break;

                case 2:
                    // Return a vehicle
                    System.out.print("Enter the vehicle make: ");
                    make = scanner.nextLine();
                    System.out.print("Enter the vehicle model: ");
                    model = scanner.nextLine();
                    
                    Vehicle returnVehicle = null;
                    
                    // Check for rented vehicles
                    for (Vehicle v : rentalSystem.getRentedVehicles()) {
                        if (v.getMake().equalsIgnoreCase(make) && v.getModel().equalsIgnoreCase(model)) {
                            returnVehicle = v;
                            break; // Vehicle found, no need to check further
                        }
                    }
                    
                    if (returnVehicle != null) {
                        // Return the vehicle
                        rentalSystem.returnVehicle(returnVehicle);
                        System.out.println("Vehicle returned successfully.");
                    } else {
                        System.out.println("Invalid return. Vehicle not rented.");
                    }
                    break;

                case 3:
                    // Display Rental Information
                    rentalSystem.displayRentalInfo();  
                    break;

                case 4:
                    // Exit
                    System.out.println("Thank you for using the Vehicle Rental System. Goodbye!");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice. Please enter a valid option...");
            }
        }
    }
}

// Vehicle class
class Vehicle {
    private String make;
    private String model;
    private int year;
    private double rentalRate;

    public Vehicle(String make, String model, int year, double rentalRate) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.rentalRate = rentalRate;
    }

    public void displayInfo() {
        System.out.println("Make: " + make);
        System.out.println("Model: " + model);
        System.out.println("Year: " + year);
        System.out.println("Rental Rate: " + rentalRate);
    }

    public double getRentalRate() {
        return rentalRate;
    }

    public String getMake() {
        return make;
    }

    public String getModel() {
        return model;
    }
}

// RentalSystem class
class RentalSystem {
    private List<Vehicle> availableVehicles;
    private List<Vehicle> rentedVehicles;

    public RentalSystem() {
        availableVehicles = new ArrayList<>();
        rentedVehicles = new ArrayList<>();
    }

    // Add vehicles to rental system
    public void addVehicle(Vehicle vehicle) {
        availableVehicles.add(vehicle);
    }

    public List<Vehicle> getAvailableVehicles() {
        return availableVehicles;
    }

    public List<Vehicle> getRentedVehicles() {
        return rentedVehicles;
    }

    // Rent vehicle
    public void rentVehicle(Vehicle vehicle) {
        if (availableVehicles.contains(vehicle)) {
            availableVehicles.remove(vehicle);
            rentedVehicles.add(vehicle);
        }
    }

    // Return rented vehicle
    public void returnVehicle(Vehicle vehicle) {
        if (rentedVehicles.contains(vehicle)) {
            rentedVehicles.remove(vehicle);
            availableVehicles.add(vehicle);
        }
    }

    // Display available and rented vehicles
    public void displayRentalInfo() {
        System.out.println("Available vehicles: ");
        for (Vehicle av : availableVehicles) {
            av.displayInfo();
            System.out.println();
        }

        System.out.println("Rented vehicles: ");
        for (Vehicle rv : rentedVehicles) {
            rv.displayInfo();
            System.out.println();
        }
    }

    // Calculate total rental cost
    public double calculateRentalCost(Vehicle vehicle, int rentalDuration) {
        double rentalRate = vehicle.getRentalRate();
        return rentalRate * rentalDuration;
    }
}
